#+TITLE: Using literate Agda files

You too can build literate Agda proofs! Teaching you
how is the ontology of this document.

** Installing Agda

To use Agda, you must first install it.

1. Install [[https://docs.haskellstack.org/en/stable/README/][Stack]] if you don't have it installed already.

   #+BEGIN_SRC sh
   $ curl -sSL https://get.haskellstack.org/ | sh
   #+END_SRC

1. Clone the Agda source.

   #+BEGIN_SRC sh
   $ git clone git@github.com:agda/agda.git
   #+END_SRC

1. Use Stack to build and install Agda.

   #+BEGIN_SRC sh
   $ cd agda
   $ stack --stack-yaml stack-<resolver>.yaml install
   #+END_SRC

1. Make a coffee.

1. You should see a few lines stating that two binaries were
   installed: ~agda~ and ~agda-mode~. ~agda-mode~ is the Emacs
   integration. To hook Agda up to Emacs, run that command and tell it
   to set itself up. This requires that ~stack~ installed binaries are
   on your ~$PATH~. ~~/.local/bin~ on my Linux machine.

   #+BEGIN_SRC sh
   $ agda-mode setup
   #+END_SRC

   If this is not your first go around with an Agda installation, use
   ~compile~ rather than ~setup~. This does the elisp complilation
   with the fresh source code, but doesn't touch your ~init.el~ file
   again.

   NB: It *will not* work if you've already run ~setup~ to do it again
   after updating Agda. The first thing that ~setup~ does is check
   your ~init.el~ file for the presence of an Agda config. If it's
   already there, it does nothing.

** Configuring Agda

Agda's "library system" is... weird, in that it doesn't really have
one. What it /does/ have, is a collection of text files which help the
compiler find the right source files. Here's what you need.

*** ~$AGDA_DIR~

By default, it's ~~/.agda~:

#+BEGIN_QUOTE
The ~AGDA_DIR~ defaults to ~~/.agda~ on unix-like systems[.]
#+END_QUOTE

[[https://agda.readthedocs.io/en/latest/tools/package-system.html][/The Agda docs/]]

~$AGDA_DIR~ should contain the following files:

#+BEGIN_SRC shell
$ tree ~/.agda
/home/dpitt/.agda
├── defaults
└── libraries
#+END_SRC

*** The libraries file

~libraries~ /registers/ Agda libraries through a path to an Agda
library file. You can read more [[https://agda.readthedocs.io/en/latest/tools/package-system.html][here]].

You'll also want to clone the standard library.

#+BEGIN_SRC sh
$ git clone git@github.com:agda/agda-stdlib.git
#+END_SRC

Then, add the path to the stdlib's library file to your libraries
file:

#+BEGIN_SRC sh
$ cat ~/.agda/libraries
/home/dpitt/src/agda-stdlib/standard-library.agdalib
#+END_SRC

*** Defaults

~defaults~ contains registered library names which you would like to
be loaded *any* time you open an Agda file. Let's setup the Agda
standard library so it's always availble when opening an Agda file.

#+BEGIN_SRC sh
$ echo standard-library >> ~/.agda/defaults
#+END_SRC

** LaTeX

To generate latex source from the literate Agda files, you can run the
Agda compiler with the ~--latex~ switch.

#+BEGIN_SRC shell
$ agda --latex Proof.lagda
#+END_SRC

It'll check the file first, then output the Agda style file and your
literate Agda file as latex source into a folder called ~latex~. There 
is a style file here which includes the Agda package and a few other 
tweaks. I recommend including it in your sources rather than the
Agda package directly.

#+BEGIN_SRC latex
\usepackage{pittma}
#+END_SRC

Once you have the LaTeX source, build a pdf with ~pdflatex~:

#+BEGIN_SRC shell
$ pdflatex Proof.tex
#+END_SRC

~pdflatex~ is available via the ~texlive~ package, available however
you like to retrieve packages. I recommend going with the ~full~
version.

** Gotchas

Agda pervasively uses unicode symbols and in a recent update to the
LaTeX backend, the mappings from unicode to math mode was removed so
that a user could do this themselves. The ~pittma~ style file includes
a good number of these mappings, but if you run into a situation where
~pdflatex~ is telling you it doesn't know what to do with a unicode
character, just add it to the list:

#+BEGIN_SRC latex
\DeclareUnicodeCharacter{2203}{$\exists$}
#+END_SRC
